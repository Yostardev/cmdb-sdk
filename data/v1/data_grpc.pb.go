// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: data/v1/data.proto

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataService_CreateCollection_FullMethodName       = "/data.DataService/CreateCollection"
	DataService_DeleteCollection_FullMethodName       = "/data.DataService/DeleteCollection"
	DataService_CreateUniqueIndex_FullMethodName      = "/data.DataService/CreateUniqueIndex"
	DataService_DeleteUniqueIndex_FullMethodName      = "/data.DataService/DeleteUniqueIndex"
	DataService_ListDocument_FullMethodName           = "/data.DataService/ListDocument"
	DataService_AllDocument_FullMethodName            = "/data.DataService/AllDocument"
	DataService_GetDocument_FullMethodName            = "/data.DataService/GetDocument"
	DataService_InsertDocument_FullMethodName         = "/data.DataService/InsertDocument"
	DataService_UpdateDocument_FullMethodName         = "/data.DataService/UpdateDocument"
	DataService_UpdateDocumentByFilter_FullMethodName = "/data.DataService/UpdateDocumentByFilter"
	DataService_DeleteDocument_FullMethodName         = "/data.DataService/DeleteDocument"
	DataService_BatchDeleteDocument_FullMethodName    = "/data.DataService/BatchDeleteDocument"
	DataService_GetTreeNodes_FullMethodName           = "/data.DataService/GetTreeNodes"
	DataService_GetResourceCount_FullMethodName       = "/data.DataService/GetResourceCount"
	DataService_Distinct_FullMethodName               = "/data.DataService/Distinct"
	DataService_Relation_FullMethodName               = "/data.DataService/Relation"
)

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	CreateCollection(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCollection(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateUniqueIndex(ctx context.Context, in *UniqueIndexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUniqueIndex(ctx context.Context, in *UniqueIndexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDocument(ctx context.Context, in *ListDocumentRequest, opts ...grpc.CallOption) (*ListDocumentResponse, error)
	AllDocument(ctx context.Context, in *AllDocumentRequest, opts ...grpc.CallOption) (*DocumentsResponse, error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	InsertDocument(ctx context.Context, in *InsertDocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error)
	UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error)
	UpdateDocumentByFilter(ctx context.Context, in *UpdateDocumentByFilterRequest, opts ...grpc.CallOption) (*DocumentResponse, error)
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BatchDeleteDocument(ctx context.Context, in *BatchDeleteDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTreeNodes(ctx context.Context, in *GetTreeNodesRequest, opts ...grpc.CallOption) (*GetTreeNodesResponse, error)
	GetResourceCount(ctx context.Context, in *GetResourceCountRequest, opts ...grpc.CallOption) (*ResourceCountResponse, error)
	Distinct(ctx context.Context, in *DistinctRequest, opts ...grpc.CallOption) (*DistinctResponse, error)
	Relation(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) CreateCollection(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataService_CreateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteCollection(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataService_DeleteCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateUniqueIndex(ctx context.Context, in *UniqueIndexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataService_CreateUniqueIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteUniqueIndex(ctx context.Context, in *UniqueIndexRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataService_DeleteUniqueIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListDocument(ctx context.Context, in *ListDocumentRequest, opts ...grpc.CallOption) (*ListDocumentResponse, error) {
	out := new(ListDocumentResponse)
	err := c.cc.Invoke(ctx, DataService_ListDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) AllDocument(ctx context.Context, in *AllDocumentRequest, opts ...grpc.CallOption) (*DocumentsResponse, error) {
	out := new(DocumentsResponse)
	err := c.cc.Invoke(ctx, DataService_AllDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, DataService_GetDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) InsertDocument(ctx context.Context, in *InsertDocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error) {
	out := new(DocumentResponse)
	err := c.cc.Invoke(ctx, DataService_InsertDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error) {
	out := new(DocumentResponse)
	err := c.cc.Invoke(ctx, DataService_UpdateDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateDocumentByFilter(ctx context.Context, in *UpdateDocumentByFilterRequest, opts ...grpc.CallOption) (*DocumentResponse, error) {
	out := new(DocumentResponse)
	err := c.cc.Invoke(ctx, DataService_UpdateDocumentByFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataService_DeleteDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) BatchDeleteDocument(ctx context.Context, in *BatchDeleteDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataService_BatchDeleteDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetTreeNodes(ctx context.Context, in *GetTreeNodesRequest, opts ...grpc.CallOption) (*GetTreeNodesResponse, error) {
	out := new(GetTreeNodesResponse)
	err := c.cc.Invoke(ctx, DataService_GetTreeNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetResourceCount(ctx context.Context, in *GetResourceCountRequest, opts ...grpc.CallOption) (*ResourceCountResponse, error) {
	out := new(ResourceCountResponse)
	err := c.cc.Invoke(ctx, DataService_GetResourceCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) Distinct(ctx context.Context, in *DistinctRequest, opts ...grpc.CallOption) (*DistinctResponse, error) {
	out := new(DistinctResponse)
	err := c.cc.Invoke(ctx, DataService_Distinct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) Relation(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataService_Relation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	CreateCollection(context.Context, *CollectionRequest) (*emptypb.Empty, error)
	DeleteCollection(context.Context, *CollectionRequest) (*emptypb.Empty, error)
	CreateUniqueIndex(context.Context, *UniqueIndexRequest) (*emptypb.Empty, error)
	DeleteUniqueIndex(context.Context, *UniqueIndexRequest) (*emptypb.Empty, error)
	ListDocument(context.Context, *ListDocumentRequest) (*ListDocumentResponse, error)
	AllDocument(context.Context, *AllDocumentRequest) (*DocumentsResponse, error)
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	InsertDocument(context.Context, *InsertDocumentRequest) (*DocumentResponse, error)
	UpdateDocument(context.Context, *UpdateDocumentRequest) (*DocumentResponse, error)
	UpdateDocumentByFilter(context.Context, *UpdateDocumentByFilterRequest) (*DocumentResponse, error)
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*emptypb.Empty, error)
	BatchDeleteDocument(context.Context, *BatchDeleteDocumentRequest) (*emptypb.Empty, error)
	GetTreeNodes(context.Context, *GetTreeNodesRequest) (*GetTreeNodesResponse, error)
	GetResourceCount(context.Context, *GetResourceCountRequest) (*ResourceCountResponse, error)
	Distinct(context.Context, *DistinctRequest) (*DistinctResponse, error)
	Relation(context.Context, *RelationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) CreateCollection(context.Context, *CollectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedDataServiceServer) DeleteCollection(context.Context, *CollectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedDataServiceServer) CreateUniqueIndex(context.Context, *UniqueIndexRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUniqueIndex not implemented")
}
func (UnimplementedDataServiceServer) DeleteUniqueIndex(context.Context, *UniqueIndexRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUniqueIndex not implemented")
}
func (UnimplementedDataServiceServer) ListDocument(context.Context, *ListDocumentRequest) (*ListDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocument not implemented")
}
func (UnimplementedDataServiceServer) AllDocument(context.Context, *AllDocumentRequest) (*DocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllDocument not implemented")
}
func (UnimplementedDataServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDataServiceServer) InsertDocument(context.Context, *InsertDocumentRequest) (*DocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDocument not implemented")
}
func (UnimplementedDataServiceServer) UpdateDocument(context.Context, *UpdateDocumentRequest) (*DocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedDataServiceServer) UpdateDocumentByFilter(context.Context, *UpdateDocumentByFilterRequest) (*DocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocumentByFilter not implemented")
}
func (UnimplementedDataServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedDataServiceServer) BatchDeleteDocument(context.Context, *BatchDeleteDocumentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteDocument not implemented")
}
func (UnimplementedDataServiceServer) GetTreeNodes(context.Context, *GetTreeNodesRequest) (*GetTreeNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreeNodes not implemented")
}
func (UnimplementedDataServiceServer) GetResourceCount(context.Context, *GetResourceCountRequest) (*ResourceCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceCount not implemented")
}
func (UnimplementedDataServiceServer) Distinct(context.Context, *DistinctRequest) (*DistinctResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Distinct not implemented")
}
func (UnimplementedDataServiceServer) Relation(context.Context, *RelationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relation not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateCollection(ctx, req.(*CollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteCollection(ctx, req.(*CollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateUniqueIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniqueIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateUniqueIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_CreateUniqueIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateUniqueIndex(ctx, req.(*UniqueIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteUniqueIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniqueIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteUniqueIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteUniqueIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteUniqueIndex(ctx, req.(*UniqueIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ListDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListDocument(ctx, req.(*ListDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_AllDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).AllDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_AllDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).AllDocument(ctx, req.(*AllDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_InsertDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).InsertDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_InsertDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).InsertDocument(ctx, req.(*InsertDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_UpdateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateDocument(ctx, req.(*UpdateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateDocumentByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateDocumentByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_UpdateDocumentByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateDocumentByFilter(ctx, req.(*UpdateDocumentByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_BatchDeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).BatchDeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_BatchDeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).BatchDeleteDocument(ctx, req.(*BatchDeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetTreeNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetTreeNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetTreeNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetTreeNodes(ctx, req.(*GetTreeNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetResourceCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetResourceCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetResourceCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetResourceCount(ctx, req.(*GetResourceCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_Distinct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistinctRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Distinct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_Distinct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Distinct(ctx, req.(*DistinctRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_Relation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Relation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_Relation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Relation(ctx, req.(*RelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _DataService_CreateCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _DataService_DeleteCollection_Handler,
		},
		{
			MethodName: "CreateUniqueIndex",
			Handler:    _DataService_CreateUniqueIndex_Handler,
		},
		{
			MethodName: "DeleteUniqueIndex",
			Handler:    _DataService_DeleteUniqueIndex_Handler,
		},
		{
			MethodName: "ListDocument",
			Handler:    _DataService_ListDocument_Handler,
		},
		{
			MethodName: "AllDocument",
			Handler:    _DataService_AllDocument_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DataService_GetDocument_Handler,
		},
		{
			MethodName: "InsertDocument",
			Handler:    _DataService_InsertDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _DataService_UpdateDocument_Handler,
		},
		{
			MethodName: "UpdateDocumentByFilter",
			Handler:    _DataService_UpdateDocumentByFilter_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _DataService_DeleteDocument_Handler,
		},
		{
			MethodName: "BatchDeleteDocument",
			Handler:    _DataService_BatchDeleteDocument_Handler,
		},
		{
			MethodName: "GetTreeNodes",
			Handler:    _DataService_GetTreeNodes_Handler,
		},
		{
			MethodName: "GetResourceCount",
			Handler:    _DataService_GetResourceCount_Handler,
		},
		{
			MethodName: "Distinct",
			Handler:    _DataService_Distinct_Handler,
		},
		{
			MethodName: "Relation",
			Handler:    _DataService_Relation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data/v1/data.proto",
}
