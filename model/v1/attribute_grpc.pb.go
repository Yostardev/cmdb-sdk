// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: model/v1/attribute.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AttributeService_All_FullMethodName    = "/model.AttributeService/All"
	AttributeService_List_FullMethodName   = "/model.AttributeService/List"
	AttributeService_Get_FullMethodName    = "/model.AttributeService/Get"
	AttributeService_Create_FullMethodName = "/model.AttributeService/Create"
	AttributeService_Update_FullMethodName = "/model.AttributeService/Update"
	AttributeService_Delete_FullMethodName = "/model.AttributeService/Delete"
)

// AttributeServiceClient is the client API for AttributeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttributeServiceClient interface {
	All(ctx context.Context, in *AttributeAllRequest, opts ...grpc.CallOption) (*AttributeAllResponse, error)
	List(ctx context.Context, in *AttributeListRequest, opts ...grpc.CallOption) (*AttributeListResponse, error)
	Get(ctx context.Context, in *AttributeGetRequest, opts ...grpc.CallOption) (*AttributeResponse, error)
	Create(ctx context.Context, in *AttributeCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *AttributeUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *AttributeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type attributeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttributeServiceClient(cc grpc.ClientConnInterface) AttributeServiceClient {
	return &attributeServiceClient{cc}
}

func (c *attributeServiceClient) All(ctx context.Context, in *AttributeAllRequest, opts ...grpc.CallOption) (*AttributeAllResponse, error) {
	out := new(AttributeAllResponse)
	err := c.cc.Invoke(ctx, AttributeService_All_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeServiceClient) List(ctx context.Context, in *AttributeListRequest, opts ...grpc.CallOption) (*AttributeListResponse, error) {
	out := new(AttributeListResponse)
	err := c.cc.Invoke(ctx, AttributeService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeServiceClient) Get(ctx context.Context, in *AttributeGetRequest, opts ...grpc.CallOption) (*AttributeResponse, error) {
	out := new(AttributeResponse)
	err := c.cc.Invoke(ctx, AttributeService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeServiceClient) Create(ctx context.Context, in *AttributeCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AttributeService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeServiceClient) Update(ctx context.Context, in *AttributeUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AttributeService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeServiceClient) Delete(ctx context.Context, in *AttributeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AttributeService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttributeServiceServer is the server API for AttributeService service.
// All implementations must embed UnimplementedAttributeServiceServer
// for forward compatibility
type AttributeServiceServer interface {
	All(context.Context, *AttributeAllRequest) (*AttributeAllResponse, error)
	List(context.Context, *AttributeListRequest) (*AttributeListResponse, error)
	Get(context.Context, *AttributeGetRequest) (*AttributeResponse, error)
	Create(context.Context, *AttributeCreateRequest) (*emptypb.Empty, error)
	Update(context.Context, *AttributeUpdateRequest) (*emptypb.Empty, error)
	Delete(context.Context, *AttributeDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAttributeServiceServer()
}

// UnimplementedAttributeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttributeServiceServer struct {
}

func (UnimplementedAttributeServiceServer) All(context.Context, *AttributeAllRequest) (*AttributeAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedAttributeServiceServer) List(context.Context, *AttributeListRequest) (*AttributeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAttributeServiceServer) Get(context.Context, *AttributeGetRequest) (*AttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAttributeServiceServer) Create(context.Context, *AttributeCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAttributeServiceServer) Update(context.Context, *AttributeUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAttributeServiceServer) Delete(context.Context, *AttributeDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAttributeServiceServer) mustEmbedUnimplementedAttributeServiceServer() {}

// UnsafeAttributeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttributeServiceServer will
// result in compilation errors.
type UnsafeAttributeServiceServer interface {
	mustEmbedUnimplementedAttributeServiceServer()
}

func RegisterAttributeServiceServer(s grpc.ServiceRegistrar, srv AttributeServiceServer) {
	s.RegisterService(&AttributeService_ServiceDesc, srv)
}

func _AttributeService_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeServiceServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttributeService_All_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeServiceServer).All(ctx, req.(*AttributeAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttributeService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeServiceServer).List(ctx, req.(*AttributeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttributeService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeServiceServer).Get(ctx, req.(*AttributeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttributeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeServiceServer).Create(ctx, req.(*AttributeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttributeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeServiceServer).Update(ctx, req.(*AttributeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttributeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeServiceServer).Delete(ctx, req.(*AttributeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttributeService_ServiceDesc is the grpc.ServiceDesc for AttributeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttributeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.AttributeService",
	HandlerType: (*AttributeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _AttributeService_All_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AttributeService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AttributeService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AttributeService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AttributeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AttributeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/v1/attribute.proto",
}
