// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: model/v1/relation.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelationService_All_FullMethodName                    = "/model.RelationService/All"
	RelationService_AllByModelName_FullMethodName         = "/model.RelationService/AllByModelName"
	RelationService_AllByRelationModelName_FullMethodName = "/model.RelationService/AllByRelationModelName"
	RelationService_List_FullMethodName                   = "/model.RelationService/List"
	RelationService_Get_FullMethodName                    = "/model.RelationService/Get"
	RelationService_Create_FullMethodName                 = "/model.RelationService/Create"
	RelationService_Update_FullMethodName                 = "/model.RelationService/Update"
	RelationService_Delete_FullMethodName                 = "/model.RelationService/Delete"
)

// RelationServiceClient is the client API for RelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceClient interface {
	All(ctx context.Context, in *RelationAllRequest, opts ...grpc.CallOption) (*RelationAllResponse, error)
	AllByModelName(ctx context.Context, in *RelationAllByModelNameRequest, opts ...grpc.CallOption) (*RelationAllResponse, error)
	AllByRelationModelName(ctx context.Context, in *RelationAllByModelNameRequest, opts ...grpc.CallOption) (*RelationAllResponse, error)
	List(ctx context.Context, in *RelationListRequest, opts ...grpc.CallOption) (*RelationListResponse, error)
	Get(ctx context.Context, in *RelationGetRequest, opts ...grpc.CallOption) (*RelationResponse, error)
	Create(ctx context.Context, in *RelationCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *RelationUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *RelationDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type relationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceClient(cc grpc.ClientConnInterface) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) All(ctx context.Context, in *RelationAllRequest, opts ...grpc.CallOption) (*RelationAllResponse, error) {
	out := new(RelationAllResponse)
	err := c.cc.Invoke(ctx, RelationService_All_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) AllByModelName(ctx context.Context, in *RelationAllByModelNameRequest, opts ...grpc.CallOption) (*RelationAllResponse, error) {
	out := new(RelationAllResponse)
	err := c.cc.Invoke(ctx, RelationService_AllByModelName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) AllByRelationModelName(ctx context.Context, in *RelationAllByModelNameRequest, opts ...grpc.CallOption) (*RelationAllResponse, error) {
	out := new(RelationAllResponse)
	err := c.cc.Invoke(ctx, RelationService_AllByRelationModelName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) List(ctx context.Context, in *RelationListRequest, opts ...grpc.CallOption) (*RelationListResponse, error) {
	out := new(RelationListResponse)
	err := c.cc.Invoke(ctx, RelationService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) Get(ctx context.Context, in *RelationGetRequest, opts ...grpc.CallOption) (*RelationResponse, error) {
	out := new(RelationResponse)
	err := c.cc.Invoke(ctx, RelationService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) Create(ctx context.Context, in *RelationCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RelationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) Update(ctx context.Context, in *RelationUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RelationService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) Delete(ctx context.Context, in *RelationDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RelationService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceServer is the server API for RelationService service.
// All implementations must embed UnimplementedRelationServiceServer
// for forward compatibility
type RelationServiceServer interface {
	All(context.Context, *RelationAllRequest) (*RelationAllResponse, error)
	AllByModelName(context.Context, *RelationAllByModelNameRequest) (*RelationAllResponse, error)
	AllByRelationModelName(context.Context, *RelationAllByModelNameRequest) (*RelationAllResponse, error)
	List(context.Context, *RelationListRequest) (*RelationListResponse, error)
	Get(context.Context, *RelationGetRequest) (*RelationResponse, error)
	Create(context.Context, *RelationCreateRequest) (*emptypb.Empty, error)
	Update(context.Context, *RelationUpdateRequest) (*emptypb.Empty, error)
	Delete(context.Context, *RelationDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRelationServiceServer()
}

// UnimplementedRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServiceServer struct {
}

func (UnimplementedRelationServiceServer) All(context.Context, *RelationAllRequest) (*RelationAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedRelationServiceServer) AllByModelName(context.Context, *RelationAllByModelNameRequest) (*RelationAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllByModelName not implemented")
}
func (UnimplementedRelationServiceServer) AllByRelationModelName(context.Context, *RelationAllByModelNameRequest) (*RelationAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllByRelationModelName not implemented")
}
func (UnimplementedRelationServiceServer) List(context.Context, *RelationListRequest) (*RelationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRelationServiceServer) Get(context.Context, *RelationGetRequest) (*RelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRelationServiceServer) Create(context.Context, *RelationCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRelationServiceServer) Update(context.Context, *RelationUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRelationServiceServer) Delete(context.Context, *RelationDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRelationServiceServer) mustEmbedUnimplementedRelationServiceServer() {}

// UnsafeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceServer will
// result in compilation errors.
type UnsafeRelationServiceServer interface {
	mustEmbedUnimplementedRelationServiceServer()
}

func RegisterRelationServiceServer(s grpc.ServiceRegistrar, srv RelationServiceServer) {
	s.RegisterService(&RelationService_ServiceDesc, srv)
}

func _RelationService_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_All_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).All(ctx, req.(*RelationAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_AllByModelName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationAllByModelNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).AllByModelName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_AllByModelName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).AllByModelName(ctx, req.(*RelationAllByModelNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_AllByRelationModelName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationAllByModelNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).AllByRelationModelName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_AllByRelationModelName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).AllByRelationModelName(ctx, req.(*RelationAllByModelNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).List(ctx, req.(*RelationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).Get(ctx, req.(*RelationGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).Create(ctx, req.(*RelationCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).Update(ctx, req.(*RelationUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).Delete(ctx, req.(*RelationDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationService_ServiceDesc is the grpc.ServiceDesc for RelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.RelationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _RelationService_All_Handler,
		},
		{
			MethodName: "AllByModelName",
			Handler:    _RelationService_AllByModelName_Handler,
		},
		{
			MethodName: "AllByRelationModelName",
			Handler:    _RelationService_AllByRelationModelName_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RelationService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RelationService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RelationService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RelationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RelationService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/v1/relation.proto",
}
